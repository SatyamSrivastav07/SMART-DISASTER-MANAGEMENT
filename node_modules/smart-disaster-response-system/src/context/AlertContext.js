import React, { createContext, useContext, useState, useEffect } from 'react';
import { useSensorData } from './SensorDataContext';

const AlertContext = createContext();

export const useAlerts = () => {
  const context = useContext(AlertContext);
  if (!context) {
    throw new Error('useAlerts must be used within an AlertProvider');
  }
  return context;
};

export const AlertProvider = ({ children }) => {
  const { sensorData } = useSensorData();
  const [alerts, setAlerts] = useState([]);
  const [alertHistory, setAlertHistory] = useState([]);
  const [alertSettings, setAlertSettings] = useState({
    seismic: { threshold: 3.0, enabled: true },
    windSpeed: { threshold: 30, enabled: true },
    airQuality: { threshold: 150, enabled: true },
    waterLevel: { threshold: 7, enabled: true },
    temperature: { threshold: 40, enabled: true }
  });

  const generateAlert = (type, message, severity, location = 'Ghaziabad, UP') => {
    const newAlert = {
      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type,
      message,
      severity,
      location,
      timestamp: new Date(),
      acknowledged: false,
      resolved: false,
      responseTeams: [],
      estimatedImpact: calculateImpact(type, severity),
      coordinates: { lat: 28.6692, lng: 77.4538 }
    };

    setAlerts(prev => {
      const exists = prev.some(alert => 
        alert.type === type && 
        alert.severity === severity && 
        !alert.resolved &&
        (Date.now() - new Date(alert.timestamp).getTime()) < 300000 // 5 minutes
      );
      
      if (exists) return prev;
      return [newAlert, ...prev.slice(0, 49)]; // Keep last 50 alerts
    });

    setAlertHistory(prev => [newAlert, ...prev.slice(0, 999)]); // Keep last 1000 in history

    // Trigger notifications
    if ('Notification' in window && Notification.permission === 'granted') {
      new Notification(`${severity.toUpperCase()}: ${type}`, {
        body: message,
        icon: '/favicon.ico',
        tag: type
      });
    }

    return newAlert;
  };

  const calculateImpact = (type, severity) => {
    const baseImpact = {
      earthquake: { critical: 10000, warning: 5000, moderate: 1000 },
      flood: { critical: 8000, warning: 4000, moderate: 800 },
      storm: { critical: 6000, warning: 3000, moderate: 600 },
      pollution: { critical: 15000, warning: 8000, moderate: 2000 },
      fire: { critical: 5000, warning: 2000, moderate: 500 }
    };

    return baseImpact[type]?.[severity] || 1000;
  };

  const acknowledgeAlert = (alertId) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId 
        ? { ...alert, acknowledged: true, acknowledgedAt: new Date() }
        : alert
    ));
  };

  const resolveAlert = (alertId, resolution = '') => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId 
        ? { 
            ...alert, 
            resolved: true, 
            resolvedAt: new Date(),
            resolution 
          }
        : alert
    ));
  };

  const assignResponseTeam = (alertId, teamId) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId 
        ? { 
            ...alert, 
            responseTeams: [...alert.responseTeams, {
              id: teamId,
              assignedAt: new Date(),
              status: 'dispatched'
            }]
          }
        : alert
    ));
  };

  // Monitor sensor data and generate alerts
  useEffect(() => {
    if (!sensorData) return;

    const { seismic, weather, airQuality, waterLevel } = sensorData;

    // Seismic monitoring
    if (alertSettings.seismic.enabled && seismic.magnitude > alertSettings.seismic.threshold) {
      const severity = seismic.magnitude > 4.5 ? 'critical' : 
                     seismic.magnitude > 3.5 ? 'warning' : 'moderate';
      generateAlert(
        'earthquake',
        `Seismic activity detected: ${seismic.magnitude.toFixed(1)} magnitude`,
        severity
      );
    }

    // Weather monitoring
    if (alertSettings.windSpeed.enabled && weather.windSpeed > alertSettings.windSpeed.threshold) {
      const severity = weather.windSpeed > 50 ? 'critical' : 
                     weather.windSpeed > 35 ? 'warning' : 'moderate';
      generateAlert(
        'storm',
        `High wind speeds: ${weather.windSpeed.toFixed(1)} km/h`,
        severity
      );
    }

    // Air quality monitoring
    if (alertSettings.airQuality.enabled && airQuality.aqi > alertSettings.airQuality.threshold) {
      const severity = airQuality.aqi > 250 ? 'critical' : 
                     airQuality.aqi > 200 ? 'warning' : 'moderate';
      generateAlert(
        'pollution',
        `Poor air quality: AQI ${airQuality.aqi.toFixed(0)}`,
        severity
      );
    }

    // Water level monitoring
    if (alertSettings.waterLevel.enabled && waterLevel.level > alertSettings.waterLevel.threshold) {
      const severity = waterLevel.level > 9 ? 'critical' : 
                     waterLevel.level > 8 ? 'warning' : 'moderate';
      generateAlert(
        'flood',
        `Rising water levels: ${waterLevel.level.toFixed(1)}m`,
        severity
      );
    }

    // Temperature monitoring
    if (alertSettings.temperature.enabled && weather.temperature > alertSettings.temperature.threshold) {
      generateAlert(
        'heatwave',
        `Extreme temperature: ${weather.temperature.toFixed(1)}Â°C`,
        'warning'
      );
    }

  }, [sensorData, alertSettings]);

  // Auto-resolve old alerts
  useEffect(() => {
    const interval = setInterval(() => {
      const now = Date.now();
      setAlerts(prev => prev.map(alert => {
        const alertAge = now - new Date(alert.timestamp).getTime();
        const autoResolveTime = alert.severity === 'critical' ? 3600000 : 1800000; // 1hr or 30min
        
        if (!alert.resolved && alertAge > autoResolveTime) {
          return {
            ...alert,
            resolved: true,
            resolvedAt: new Date(),
            resolution: 'Auto-resolved due to timeout'
          };
        }
        return alert;
      }));
    }, 60000); // Check every minute

    return () => clearInterval(interval);
  }, []);

  // Request notification permission
  useEffect(() => {
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission();
    }
  }, []);

  const getAlertStats = () => {
    const now = new Date();
    const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    const last7d = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

    const recentAlerts = alertHistory.filter(alert => 
      new Date(alert.timestamp) > last24h
    );

    const weeklyAlerts = alertHistory.filter(alert => 
      new Date(alert.timestamp) > last7d
    );

    return {
      active: alerts.filter(a => !a.resolved).length,
      critical: alerts.filter(a => !a.resolved && a.severity === 'critical').length,
      last24h: recentAlerts.length,
      last7d: weeklyAlerts.length,
      resolved: alerts.filter(a => a.resolved).length,
      acknowledged: alerts.filter(a => a.acknowledged).length
    };
  };

  const value = {
    alerts: alerts.filter(a => !a.resolved), // Only show unresolved alerts
    alertHistory,
    alertSettings,
    setAlertSettings,
    generateAlert,
    acknowledgeAlert,
    resolveAlert,
    assignResponseTeam,
    getAlertStats
  };

  return (
    <AlertContext.Provider value={value}>
      {children}
    </AlertContext.Provider>
  );
};