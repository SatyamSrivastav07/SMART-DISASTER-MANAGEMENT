import React, { useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';
import { TrendingUp, TrendingDown, AlertTriangle, Clock, Users, Activity } from 'lucide-react';
import { useAlerts } from '../context/AlertContext';
import Map from '../components/Map';

const Analytics = () => {
  const { alertHistory, getAlertStats } = useAlerts();
  const [timeRange, setTimeRange] = useState('7d');
  const [selectedMetric, setSelectedMetric] = useState('alerts');

  const alertStats = getAlertStats();

  // Generate analytics data
  const getAlertTrends = () => {
    const now = new Date();
    const days = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 1;
    const trends = [];

    for (let i = days - 1; i >= 0; i--) {
      const date = new Date(now.getTime() - (i * 24 * 60 * 60 * 1000));
      const dayStart = new Date(date.setHours(0, 0, 0, 0));
      const dayEnd = new Date(date.setHours(23, 59, 59, 999));
      
      const dayAlerts = alertHistory.filter(alert => {
        const alertDate = new Date(alert.timestamp);
        return alertDate >= dayStart && alertDate <= dayEnd;
      });

      trends.push({
        date: dayStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
        total: dayAlerts.length,
        critical: dayAlerts.filter(a => a.severity === 'critical').length,
        warning: dayAlerts.filter(a => a.severity === 'warning').length,
        moderate: dayAlerts.filter(a => a.severity === 'moderate').length
      });
    }

    return trends;
  };

  const getAlertsByType = () => {
    const types = {};
    alertHistory.forEach(alert => {
      types[alert.type] = (types[alert.type] || 0) + 1;
    });

    return Object.entries(types).map(([type, count]) => ({
      name: type.charAt(0).toUpperCase() + type.slice(1),
      value: count,
      color: getTypeColor(type)
    }));
  };

  const getTypeColor = (type) => {
    const colors = {
      earthquake: '#ef4444',
      flood: '#3b82f6',
      storm: '#8b5cf6',
      fire: '#f59e0b',
      pollution: '#06b6d4',
      heatwave: '#f97316'
    };
    return colors[type] || '#6b7280';
  };

  const getResponseMetrics = () => {
    const acknowledged = alertHistory.filter(a => a.acknowledged).length;
    const resolved = alertHistory.filter(a => a.resolved).length;
    const avgResponseTime = calculateAvgResponseTime();

    return {
      acknowledgmentRate: alertHistory.length > 0 ? (acknowledged / alertHistory.length) * 100 : 0,
      resolutionRate: alertHistory.length > 0 ? (resolved / alertHistory.length) * 100 : 0,
      avgResponseTime,
      totalAlerts: alertHistory.length
    };
  };

  const calculateAvgResponseTime = () => {
    const acknowledgedAlerts = alertHistory.filter(a => a.acknowledged && a.acknowledgedAt);
    if (acknowledgedAlerts.length === 0) return 0;

    const totalTime = acknowledgedAlerts.reduce((sum, alert) => {
      const responseTime = new Date(alert.acknowledgedAt) - new Date(alert.timestamp);
      return sum + responseTime;
    }, 0);

    return Math.round((totalTime / acknowledgedAlerts.length) / (1000 * 60)); // Convert to minutes
  };

  const getHourlyDistribution = () => {
    const hourly = new Array(24).fill(0);
    alertHistory.forEach(alert => {
      const hour = new Date(alert.timestamp).getHours();
      hourly[hour]++;
    });

    return hourly.map((count, hour) => ({
      hour: `${hour}:00`,
      count
    }));
  };

  const trendData = getAlertTrends();
  const typeData = getAlertsByType();
  const responseMetrics = getResponseMetrics();
  const hourlyData = getHourlyDistribution();

  const COLORS = ['#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6', '#06b6d4', '#10b981'];

  return (
    <div className="space-y-6">
      {/* Time Range Selector */}
      <div className="bg-white rounded-lg shadow-md p-4">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold">Analytics Dashboard</h2>
          <div className="flex space-x-2">
            {['24h', '7d', '30d'].map((range) => (
              <button
                key={range}
                onClick={() => setTimeRange(range)}
                className={`px-3 py-1 rounded text-sm ${
                  timeRange === range
                    ? 'bg-primary-500 text-white'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {range === '24h' ? 'Last 24h' : range === '7d' ? 'Last 7 days' : 'Last 30 days'}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Alerts</p>
              <p className="text-2xl font-bold text-gray-900">{alertStats.last7d}</p>
              <p className="text-xs text-gray-500 flex items-center mt-1">
                <TrendingUp className="w-3 h-3 mr-1 text-green-500" />
                +12% from last period
              </p>
            </div>
            <AlertTriangle className="h-8 w-8 text-primary-500" />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Avg Response Time</p>
              <p className="text-2xl font-bold text-gray-900">{responseMetrics.avgResponseTime}m</p>
              <p className="text-xs text-gray-500 flex items-center mt-1">
                <TrendingDown className="w-3 h-3 mr-1 text-green-500" />
                -5% improvement
              </p>
            </div>
            <Clock className="h-8 w-8 text-success-500" />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Resolution Rate</p>
              <p className="text-2xl font-bold text-gray-900">{responseMetrics.resolutionRate.toFixed(1)}%</p>
              <p className="text-xs text-gray-500 flex items-center mt-1">
                <TrendingUp className="w-3 h-3 mr-1 text-green-500" />
                +8% improvement
              </p>
            </div>
            <Activity className="h-8 w-8 text-green-500" />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Active Teams</p>
              <p className="text-2xl font-bold text-gray-900">12</p>
              <p className="text-xs text-gray-500">8 available, 4 deployed</p>
            </div>
            <Users className="h-8 w-8 text-purple-500" />
          </div>
        </div>
      </div>

      {/* Charts Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Alert Trends */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold mb-4">Alert Trends</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={trendData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="critical" stackId="a" fill="#ef4444" name="Critical" />
                <Bar dataKey="warning" stackId="a" fill="#f59e0b" name="Warning" />
                <Bar dataKey="moderate" stackId="a" fill="#fbbf24" name="Moderate" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Alerts by Type */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold mb-4">Alerts by Type</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={typeData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {typeData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Hourly Distribution */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4">Hourly Alert Distribution</h3>
        <div className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={hourlyData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="hour" />
              <YAxis />
              <Tooltip />
              <Line 
                type="monotone" 
                dataKey="count" 
                stroke="#3b82f6" 
                strokeWidth={2}
                dot={{ fill: '#3b82f6' }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4">Alert Location Map</h3>
        <Map />
      </div>

      {/* Performance Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h4 className="font-medium mb-4">Response Performance</h4>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-sm text-gray-600">Acknowledgment Rate</span>
              <span className="text-sm font-medium">{responseMetrics.acknowledgmentRate.toFixed(1)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-primary-500 h-2 rounded-full" 
                style={{ width: `${responseMetrics.acknowledgmentRate}%` }}
              />
            </div>

            <div className="flex justify-between">
              <span className="text-sm text-gray-600">Resolution Rate</span>
              <span className="text-sm font-medium">{responseMetrics.resolutionRate.toFixed(1)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-success-500 h-2 rounded-full" 
                style={{ width: `${responseMetrics.resolutionRate}%` }}
              />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <h4 className="font-medium mb-4">System Uptime</h4>
          <div className="text-center">
            <div className="text-3xl font-bold text-success-600">99.8%</div>
            <div className="text-sm text-gray-600">Last 30 days</div>
            <div className="mt-4 space-y-2 text-xs">
              <div className="flex justify-between">
                <span>Sensor Network</span>
                <span className="text-success-600">99.9%</span>
              </div>
              <div className="flex justify-between">
                <span>Alert System</span>
                <span className="text-success-600">99.8%</span>
              </div>
              <div className="flex justify-between">
                <span>Communication</span>
                <span className="text-warning-600">98.5%</span>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <h4 className="font-medium mb-4">Resource Utilization</h4>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-sm text-gray-600">Response Teams</span>
              <span className="text-sm font-medium">67% deployed</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div className="bg-orange-500 h-2 rounded-full" style={{ width: '67%' }} />
            </div>

            <div className="flex justify-between">
              <span className="text-sm text-gray-600">Emergency Shelters</span>
              <span className="text-sm font-medium">23% capacity</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div className="bg-green-500 h-2 rounded-full" style={{ width: '23%' }} />
            </div>

            <div className="flex justify-between">
              <span className="text-sm text-gray-600">Medical Resources</span>
              <span className="text-sm font-medium">45% utilized</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div className="bg-blue-500 h-2 rounded-full" style={{ width: '45%' }} />
            </div>
          </div>
        </div>
      </div>

      {/* Detailed Statistics */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4">Detailed Statistics</h3>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Metric
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Today
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  This Week
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  This Month
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Trend
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              <tr>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  Total Alerts
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {alertStats.last24h}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {alertStats.last7d}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {alertHistory.length}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <TrendingUp className="w-4 h-4 text-red-500" />
                </td>
              </tr>
              <tr>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  Critical Alerts
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {alertStats.critical}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {alertHistory.filter(a => a.severity === 'critical').length}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {alertHistory.filter(a => a.severity === 'critical').length}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <TrendingDown className="w-4 h-4 text-green-500" />
                </td>
              </tr>
              <tr>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  Response Time (avg)
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {responseMetrics.avgResponseTime}m
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {responseMetrics.avgResponseTime}m
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {responseMetrics.avgResponseTime}m
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <TrendingDown className="w-4 h-4 text-green-500" />
                </td>
              </tr>
              <tr>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  Resolution Rate
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {responseMetrics.resolutionRate.toFixed(1)}%
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {responseMetrics.resolutionRate.toFixed(1)}%
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {responseMetrics.resolutionRate.toFixed(1)}%
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <TrendingUp className="w-4 h-4 text-green-500" />
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Analytics;