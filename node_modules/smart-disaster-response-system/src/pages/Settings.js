import React, { useState } from 'react';
import { Settings as SettingsIcon, Bell, Shield, Users, MapPin, Phone, Save, AlertTriangle } from 'lucide-react';
import { useAlerts } from '../context/AlertContext';

const Settings = () => {
  const { alertSettings, setAlertSettings } = useAlerts();
  const [activeTab, setActiveTab] = useState('alerts');
  const [settings, setSettings] = useState({
    notifications: {
      email: true,
      sms: true,
      push: true,
      desktop: true,
      sound: true
    },
    location: {
      latitude: 28.6692,
      longitude: 77.4538,
      address: 'Ghaziabad, Uttar Pradesh, India',
      radius: 10
    },
    contacts: [
      { name: 'Emergency Contact 1', phone: '+91-9999999999', relation: 'Family' },
      { name: 'Emergency Contact 2', phone: '+91-8888888888', relation: 'Friend' }
    ],
    system: {
      language: 'en',
      timezone: 'Asia/Kolkata',
      theme: 'light',
      autoUpdate: true
    }
  });

  const handleAlertThresholdChange = (type, value) => {
    setAlertSettings(prev => ({
      ...prev,
      [type]: {
        ...prev[type],
        threshold: parseFloat(value)
      }
    }));
  };

  const handleAlertToggle = (type) => {
    setAlertSettings(prev => ({
      ...prev,
      [type]: {
        ...prev[type],
        enabled: !prev[type].enabled
      }
    }));
  };

  const handleSettingChange = (category, key, value) => {
    setSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [key]: value
      }
    }));
  };

  const handleContactChange = (index, field, value) => {
    const newContacts = [...settings.contacts];
    newContacts[index][field] = value;
    setSettings(prev => ({
      ...prev,
      contacts: newContacts
    }));
  };

  const addContact = () => {
    setSettings(prev => ({
      ...prev,
      contacts: [...prev.contacts, { name: '', phone: '', relation: '' }]
    }));
  };

  const removeContact = (index) => {
    setSettings(prev => ({
      ...prev,
      contacts: prev.contacts.filter((_, i) => i !== index)
    }));
  };

  const saveSettings = () => {
    // In a real app, this would save to backend
    alert('Settings saved successfully!');
  };

  const tabs = [
    { id: 'alerts', label: 'Alert Settings', icon: AlertTriangle },
    { id: 'notifications', label: 'Notifications', icon: Bell },
    { id: 'location', label: 'Location', icon: MapPin },
    { id: 'contacts', label: 'Emergency Contacts', icon: Phone },
    { id: 'system', label: 'System', icon: SettingsIcon }
  ];

  const AlertSettings = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold">Alert Thresholds</h3>
      
      {Object.entries(alertSettings).map(([type, config]) => (
        <div key={type} className="border rounded-lg p-4">
          <div className="flex justify-between items-center mb-3">
            <h4 className="font-medium capitalize">{type.replace(/([A-Z])/g, ' $1')}</h4>
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={config.enabled}
                onChange={() => handleAlertToggle(type)}
                className="mr-2 rounded"
              />
              <span className="text-sm">Enabled</span>
            </label>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Threshold Value
              </label>
              <input
                type="number"
                value={config.threshold}
                onChange={(e) => handleAlertThresholdChange(type, e.target.value)}
                disabled={!config.enabled}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500 disabled:bg-gray-100"
                step="0.1"
                min="0"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Unit
              </label>
              <span className="inline-block px-3 py-2 bg-gray-100 border rounded-md text-sm">
                {type === 'seismic' ? 'magnitude' :
                 type === 'windSpeed' ? 'km/h' :
                 type === 'airQuality' ? 'AQI' :
                 type === 'waterLevel' ? 'meters' :
                 type === 'temperature' ? 'Â°C' : ''}
              </span>
            </div>
          </div>
        </div>
      ))}
    </div>
  );

  const NotificationSettings = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold">Notification Preferences</h3>
      
      <div className="space-y-4">
        {Object.entries(settings.notifications).map(([type, enabled]) => (
          <div key={type} className="flex justify-between items-center py-2">
            <div>
              <span className="font-medium capitalize">{type} Notifications</span>
              <p className="text-sm text-gray-600">
                {type === 'email' ? 'Receive alerts via email' :
                 type === 'sms' ? 'Receive alerts via SMS' :
                 type === 'push' ? 'Receive push notifications' :
                 type === 'desktop' ? 'Show desktop notifications' :
                 'Play sound for alerts'}
              </p>
            </div>
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={enabled}
                onChange={(e) => handleSettingChange('notifications', type, e.target.checked)}
                className="rounded"
              />
            </label>
          </div>
        ))}
      </div>
    </div>
  );

  const LocationSettings = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold">Location Settings</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Latitude
          </label>
          <input
            type="number"
            value={settings.location.latitude}
            onChange={(e) => handleSettingChange('location', 'latitude', parseFloat(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
            step="0.0001"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Longitude
          </label>
          <input
            type="number"
            value={settings.location.longitude}
            onChange={(e) => handleSettingChange('location', 'longitude', parseFloat(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
            step="0.0001"
          />
        </div>
        
        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Address
          </label>
          <input
            type="text"
            value={settings.location.address}
            onChange={(e) => handleSettingChange('location', 'address', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Alert Radius (km)
          </label>
          <input
            type="number"
            value={settings.location.radius}
            onChange={(e) => handleSettingChange('location', 'radius', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
            min="1"
            max="100"
          />
        </div>
      </div>
    </div>
  );

  const ContactSettings = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">Emergency Contacts</h3>
        <button
          onClick={addContact}
          className="px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600"
        >
          Add Contact
        </button>
      </div>
      
      <div className="space-y-4">
        {settings.contacts.map((contact, index) => (
          <div key={index} className="border rounded-lg p-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Name
                </label>
                <input
                  type="text"
                  value={contact.name}
                  onChange={(e) => handleContactChange(index, 'name', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Phone Number
                </label>
                <input
                  type="tel"
                  value={contact.phone}
                  onChange={(e) => handleContactChange(index, 'phone', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Relationship
                </label>
                <select
                  value={contact.relation}
                  onChange={(e) => handleContactChange(index, 'relation', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
                >
                  <option value="">Select...</option>
                  <option value="Family">Family</option>
                  <option value="Friend">Friend</option>
                  <option value="Neighbor">Neighbor</option>
                  <option value="Colleague">Colleague</option>
                  <option value="Other">Other</option>
                </select>
              </div>
            </div>
            
            <div className="mt-3 flex justify-end">
              <button
                onClick={() => removeContact(index)}
                className="px-3 py-1 text-sm text-red-600 hover:text-red-800"
              >
                Remove
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const SystemSettings = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-semibold">System Settings</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Language
          </label>
          <select
            value={settings.system.language}
            onChange={(e) => handleSettingChange('system', 'language', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
          >
            <option value="en">English</option>
            <option value="hi">Hindi</option>
            <option value="ur">Urdu</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Timezone
          </label>
          <select
            value={settings.system.timezone}
            onChange={(e) => handleSettingChange('system', 'timezone', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
          >
            <option value="Asia/Kolkata">Asia/Kolkata (IST)</option>
            <option value="UTC">UTC</option>
            <option value="America/New_York">America/New_York (EST)</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Theme
          </label>
          <select
            value={settings.system.theme}
            onChange={(e) => handleSettingChange('system', 'theme', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
          >
            <option value="light">Light</option>
            <option value="dark">Dark</option>
            <option value="auto">Auto</option>
          </select>
        </div>
        
        <div className="flex items-center">
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={settings.system.autoUpdate}
              onChange={(e) => handleSettingChange('system', 'autoUpdate', e.target.checked)}
              className="mr-2 rounded"
            />
            <span className="text-sm font-medium">Auto-update system</span>
          </label>
        </div>
      </div>
    </div>
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-xl font-semibold flex items-center">
          <SettingsIcon className="w-6 h-6 mr-2" />
          Settings
        </h2>
        <p className="text-gray-600 mt-1">Configure your disaster response system preferences</p>
      </div>

      {/* Tab Navigation */}
      <div className="bg-white rounded-lg shadow-md">
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8 px-6">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center ${
                  activeTab === tab.id
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <tab.icon className="w-4 h-4 mr-2" />
                {tab.label}
              </button>
            ))}
          </nav>
        </div>

        {/* Tab Content */}
        <div className="p-6">
          {activeTab === 'alerts' && <AlertSettings />}
          {activeTab === 'notifications' && <NotificationSettings />}
          {activeTab === 'location' && <LocationSettings />}
          {activeTab === 'contacts' && <ContactSettings />}
          {activeTab === 'system' && <SystemSettings />}
        </div>

        {/* Save Button */}
        <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 rounded-b-lg">
          <div className="flex justify-end">
            <button
              onClick={saveSettings}
              className="px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 flex items-center"
            >
              <Save className="w-4 h-4 mr-2" />
              Save Settings
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Settings;