import React, { useState, useEffect } from 'react';
import { Shield, AlertTriangle, Users, FileText, CheckCircle, Clock, Eye, MessageSquare } from 'lucide-react';
import { reportsAPI, teamsAPI, alertsAPI } from '../services/api';
import { useAuth } from '../context/AuthContext';

const AdminDashboard = () => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [reports, setReports] = useState([]);
  const [teams, setTeams] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [stats, setStats] = useState({});
  const [selectedTab, setSelectedTab] = useState('reports');
  const [selectedReport, setSelectedReport] = useState(null);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      const [reportsResponse, teamsResponse, alertsResponse, statsResponse] = await Promise.all([
        reportsAPI.getReports({ limit: 20 }),
        teamsAPI.getTeams(),
        alertsAPI.getAlerts({ limit: 10 }),
        reportsAPI.getReportStats()
      ]);

      setReports(reportsResponse.reports);
      setTeams(teamsResponse);
      setAlerts(alertsResponse.alerts);
      setStats(statsResponse);
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleStatusUpdate = async (reportId, newStatus, adminNotes = '') => {
    try {
      await reportsAPI.updateReportStatus(reportId, newStatus, adminNotes);
      fetchDashboardData(); // Refresh data
    } catch (error) {
      console.error('Error updating report status:', error);
    }
  };

  const handleTeamAssignment = async (reportId, teamId) => {
    try {
      await reportsAPI.assignTeam(reportId, teamId);
      await teamsAPI.assignTeam(teamId, reportId);
      fetchDashboardData(); // Refresh data
    } catch (error) {
      console.error('Error assigning team:', error);
    }
  };

  const getStatusColor = (status) => {
    const colors = {
      'reported': 'text-blue-600 bg-blue-100',
      'verified': 'text-green-600 bg-green-100',
      'in_progress': 'text-orange-600 bg-orange-100',
      'resolved': 'text-gray-600 bg-gray-100',
      'false_alarm': 'text-red-600 bg-red-100'
    };
    return colors[status] || colors.reported;
  };

  const getSeverityColor = (severity) => {
    const colors = {
      'low': 'text-yellow-600 bg-yellow-100',
      'medium': 'text-orange-600 bg-orange-100',
      'high': 'text-red-600 bg-red-100',
      'critical': 'text-red-800 bg-red-200'
    };
    return colors[severity] || colors.medium;
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h1 className="text-2xl font-bold text-gray-900 flex items-center">
          <Shield className="w-6 h-6 mr-2 text-primary-500" />
          Admin Dashboard
        </h1>
        <p className="text-gray-600 mt-1">
          Welcome back, {user?.name}. Manage disaster reports and coordinate emergency response.
        </p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-red-100">
              <AlertTriangle className="h-6 w-6 text-red-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Active Reports</p>
              <p className="text-2xl font-bold text-gray-900">{stats.overview?.active || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-green-100">
              <CheckCircle className="h-6 w-6 text-green-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Resolved</p>
              <p className="text-2xl font-bold text-gray-900">{stats.overview?.resolved || 0}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-blue-100">
              <Users className="h-6 w-6 text-blue-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Response Teams</p>
              <p className="text-2xl font-bold text-gray-900">{teams.length}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-purple-100">
              <FileText className="h-6 w-6 text-purple-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Reports</p>
              <p className="text-2xl font-bold text-gray-900">{stats.overview?.total || 0}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="bg-white rounded-lg shadow-md">
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8 px-6">
            {[
              { id: 'reports', label: 'Pending Reports', icon: FileText },
              { id: 'teams', label: 'Response Teams', icon: Users },
              { id: 'alerts', label: 'System Alerts', icon: AlertTriangle }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setSelectedTab(tab.id)}
                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center ${
                  selectedTab === tab.id
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <tab.icon className="w-4 h-4 mr-2" />
                {tab.label}
              </button>
            ))}
          </nav>
        </div>

        <div className="p-6">
          {/* Pending Reports Tab */}
          {selectedTab === 'reports' && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Pending Reports</h3>
              {reports.filter(r => r.status !== 'resolved').map((report) => (
                <div key={report._id} className="border rounded-lg p-4">
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex-1">
                      <div className="flex items-center mb-2">
                        <h4 className="font-semibold text-gray-900">{report.title}</h4>
                        <span className={`ml-3 px-2 py-1 text-xs rounded-full font-medium ${getStatusColor(report.status)}`}>
                          {report.status.replace('_', ' ').toUpperCase()}
                        </span>
                        <span className={`ml-2 px-2 py-1 text-xs rounded-full font-medium ${getSeverityColor(report.severity)}`}>
                          {report.severity.toUpperCase()}
                        </span>
                      </div>
                      
                      <p className="text-gray-700 mb-2">{report.description}</p>
                      
                      <div className="flex items-center text-sm text-gray-500 mb-2">
                        <Clock className="w-4 h-4 mr-1" />
                        <span>{new Date(report.createdAt).toLocaleString()}</span>
                        <span className="mx-2">•</span>
                        <span>{report.location.address}</span>
                      </div>
                      
                      <div className="text-sm text-gray-600">
                        <span className="font-medium">Reported by:</span> {report.reportedBy?.name}
                        {report.affectedPeople?.estimated && (
                          <>
                            <span className="mx-2">•</span>
                            <span className="font-medium">Estimated affected:</span> {report.affectedPeople.estimated}
                          </>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex flex-col space-y-2 ml-4">
                      <button
                        onClick={() => setSelectedReport(report)}
                        className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
                      >
                        <Eye className="w-4 h-4 inline mr-1" />
                        View
                      </button>
                      
                      {report.status === 'reported' && (
                        <button
                          onClick={() => handleStatusUpdate(report._id, 'verified')}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200"
                        >
                          Verify
                        </button>
                      )}
                      
                      {report.status === 'verified' && (
                        <button
                          onClick={() => handleStatusUpdate(report._id, 'in_progress')}
                          className="px-3 py-1 text-sm bg-orange-100 text-orange-700 rounded hover:bg-orange-200"
                        >
                          Start Response
                        </button>
                      )}
                      
                      <button
                        onClick={() => handleStatusUpdate(report._id, 'resolved', 'Resolved by admin')}
                        className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
                      >
                        Mark Resolved
                      </button>
                    </div>
                  </div>

                  {/* Team Assignment */}
                  <div className="border-t pt-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium text-gray-700">Assign Team:</span>
                      <div className="flex space-x-2">
                        {teams.filter(t => t.status === 'available').slice(0, 3).map((team) => (
                          <button
                            key={team._id}
                            onClick={() => handleTeamAssignment(report._id, team._id)}
                            className="px-2 py-1 text-xs bg-primary-100 text-primary-700 rounded hover:bg-primary-200"
                          >
                            {team.name}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Response Teams Tab */}
          {selectedTab === 'teams' && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Response Teams</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {teams.map((team) => (
                  <div key={team._id} className="border rounded-lg p-4">
                    <div className="flex justify-between items-start mb-3">
                      <h4 className="font-semibold text-gray-900">{team.name}</h4>
                      <span className={`px-2 py-1 text-xs rounded-full font-medium ${
                        team.status === 'available' ? 'text-green-600 bg-green-100' :
                        team.status === 'deployed' ? 'text-orange-600 bg-orange-100' :
                        'text-gray-600 bg-gray-100'
                      }`}>
                        {team.status.toUpperCase()}
                      </span>
                    </div>
                    
                    <div className="text-sm text-gray-600 space-y-1">
                      <p><span className="font-medium">Type:</span> {team.type}</p>
                      <p><span className="font-medium">Members:</span> {team.members?.length || 0}</p>
                      <p><span className="font-medium">Location:</span> {team.location?.base}</p>
                      {team.contact?.primaryPhone && (
                        <p><span className="font-medium">Contact:</span> {team.contact.primaryPhone}</p>
                      )}
                    </div>
                    
                    {team.currentAssignment && (
                      <div className="mt-3 p-2 bg-orange-50 rounded">
                        <p className="text-xs font-medium text-orange-800">Currently Assigned</p>
                        <p className="text-xs text-orange-600">
                          Since {new Date(team.currentAssignment.assignedAt).toLocaleString()}
                        </p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* System Alerts Tab */}
          {selectedTab === 'alerts' && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">System Alerts</h3>
              {alerts.map((alert) => (
                <div key={alert.id} className="border rounded-lg p-4">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center mb-2">
                        <AlertTriangle className="w-4 h-4 mr-2 text-red-500" />
                        <h4 className="font-semibold text-gray-900">{alert.message}</h4>
                        <span className={`ml-3 px-2 py-1 text-xs rounded-full font-medium ${
                          alert.severity === 'critical' ? 'text-red-600 bg-red-100' :
                          alert.severity === 'warning' ? 'text-orange-600 bg-orange-100' :
                          'text-yellow-600 bg-yellow-100'
                        }`}>
                          {alert.severity.toUpperCase()}
                        </span>
                      </div>
                      
                      <div className="text-sm text-gray-600 mb-2">
                        <span className="font-medium">Location:</span> {alert.location}
                        <span className="mx-2">•</span>
                        <span className="font-medium">Time:</span> {new Date(alert.timestamp).toLocaleString()}
                      </div>
                      
                      {alert.sensorData && (
                        <div className="text-sm text-gray-600">
                          <span className="font-medium">Sensor Data:</span> {alert.sensorData.value} {alert.sensorData.unit}
                        </div>
                      )}
                    </div>
                    
                    <div className="flex space-x-2 ml-4">
                      {!alert.acknowledged && (
                        <button className="px-3 py-1 text-sm bg-primary-100 text-primary-700 rounded hover:bg-primary-200">
                          Acknowledge
                        </button>
                      )}
                      <button className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200">
                        <MessageSquare className="w-4 h-4 inline mr-1" />
                        Respond
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Report Detail Modal */}
      {selectedReport && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-96 overflow-y-auto">
            <div className="flex justify-between items-start mb-4">
              <h3 className="text-lg font-semibold">{selectedReport.title}</h3>
              <button
                onClick={() => setSelectedReport(null)}
                className="text-gray-400 hover:text-gray-600"
              >
                ×
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <h4 className="font-medium">Description:</h4>
                <p className="text-gray-700">{selectedReport.description}</p>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium">Type:</h4>
                  <p className="capitalize">{selectedReport.type.replace('_', ' ')}</p>
                </div>
                <div>
                  <h4 className="font-medium">Severity:</h4>
                  <p className="capitalize">{selectedReport.severity}</p>
                </div>
              </div>
              
              <div>
                <h4 className="font-medium">Location:</h4>
                <p>{selectedReport.location.address}</p>
                {selectedReport.location.landmark && (
                  <p className="text-gray-600">Landmark: {selectedReport.location.landmark}</p>
                )}
              </div>
              
              {selectedReport.images && selectedReport.images.length > 0 && (
                <div>
                  <h4 className="font-medium mb-2">Images:</h4>
                  <div className="grid grid-cols-3 gap-2">
                    {selectedReport.images.map((image, index) => (
                      <img
                        key={index}
                        src={image.url}
                        alt={`Report image ${index + 1}`}
                        className="w-full h-20 object-cover rounded"
                      />
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminDashboard;