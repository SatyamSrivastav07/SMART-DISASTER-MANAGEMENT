import React, { useState } from 'react';
import { BookOpen, Play, CheckCircle, Clock, Users, Award, Shield, Heart, Wind, Droplets, Zap, Activity } from 'lucide-react';

const Training = () => {
  const [selectedModule, setSelectedModule] = useState(null);
  const [completedModules, setCompletedModules] = useState(['basic-safety', 'first-aid']);
  const [userProgress, setUserProgress] = useState({
    totalModules: 12,
    completedModules: 2,
    totalHours: 48,
    completedHours: 8,
    certificates: 1
  });

  const trainingModules = [
    {
      id: 'basic-safety',
      title: 'Basic Emergency Safety',
      description: 'Fundamental safety principles and emergency preparedness basics',
      duration: '2 hours',
      difficulty: 'Beginner',
      icon: Shield,
      progress: 100,
      topics: ['Emergency planning', 'Basic first aid', 'Communication protocols', 'Evacuation procedures'],
      completed: true
    },
    {
      id: 'earthquake-response',
      title: 'Earthquake Response',
      description: 'Learn how to respond during and after earthquake events',
      duration: '3 hours',
      difficulty: 'Intermediate',
      icon: Activity,
      progress: 45,
      topics: ['Drop, Cover, Hold', 'Post-earthquake safety', 'Building assessment', 'Aftershock preparedness'],
      completed: false
    },
    {
      id: 'fire-safety',
      title: 'Fire Safety & Prevention',
      description: 'Fire prevention, detection, and suppression techniques',
      duration: '2.5 hours',
      difficulty: 'Intermediate',
      icon: Zap,
      progress: 0,
      topics: ['Fire triangle', 'Extinguisher types', 'Evacuation routes', 'Smoke inhalation'],
      completed: false
    },
    {
      id: 'flood-response',
      title: 'Flood Emergency Response',
      description: 'Flood preparedness and water emergency management',
      duration: '2 hours',
      difficulty: 'Intermediate',
      icon: Droplets,
      progress: 25,
      topics: ['Flood warnings', 'Water safety', 'Evacuation planning', 'Post-flood cleanup'],
      completed: false
    },
    {
      id: 'first-aid',
      title: 'Advanced First Aid',
      description: 'Comprehensive first aid and medical emergency response',
      duration: '4 hours',
      difficulty: 'Advanced',
      icon: Heart,
      progress: 100,
      topics: ['CPR certification', 'Wound care', 'Shock treatment', 'Emergency medications'],
      completed: true
    },
    {
      id: 'storm-response',
      title: 'Severe Weather Response',
      description: 'Responding to storms, hurricanes, and severe weather events',
      duration: '2 hours',
      difficulty: 'Intermediate',
      icon: Wind,
      progress: 0,
      topics: ['Weather alerts', 'Storm shelters', 'Wind safety', 'Lightning protection'],
      completed: false
    }
  ];

  const emergencyKit = [
    { item: 'Water (1 gallon per person per day)', category: 'Water & Food', checked: true, priority: 'Critical' },
    { item: 'Non-perishable food (3-day supply)', category: 'Water & Food', checked: true, priority: 'Critical' },
    { item: 'Battery-powered or hand crank radio', category: 'Communication', checked: false, priority: 'High' },
    { item: 'Flashlight and extra batteries', category: 'Tools', checked: true, priority: 'Critical' },
    { item: 'First aid kit', category: 'Medical', checked: true, priority: 'Critical' },
    { item: 'Whistle for signaling help', category: 'Communication', checked: false, priority: 'High' },
    { item: 'Dust masks and plastic sheeting', category: 'Protection', checked: false, priority: 'Medium' },
    { item: 'Moist towelettes and garbage bags', category: 'Sanitation', checked: false, priority: 'Medium' },
    { item: 'Wrench or pliers to turn off utilities', category: 'Tools', checked: false, priority: 'High' },
    { item: 'Manual can opener', category: 'Tools', checked: false, priority: 'Medium' },
    { item: 'Local maps', category: 'Navigation', checked: false, priority: 'Medium' },
    { item: 'Cell phone with chargers and backup battery', category: 'Communication', checked: true, priority: 'High' }
  ];

  const drillScenarios = [
    {
      id: 'earthquake-drill',
      title: 'Earthquake Drill',
      description: 'Practice drop, cover, and hold procedures',
      duration: '10 minutes',
      participants: 'Individual/Family',
      status: 'completed'
    },
    {
      id: 'fire-evacuation',
      title: 'Fire Evacuation Drill',
      description: 'Practice evacuation routes and meeting points',
      duration: '15 minutes',
      participants: 'Family/Building',
      status: 'scheduled'
    },
    {
      id: 'flood-response',
      title: 'Flood Response Simulation',
      description: 'Practice flood emergency procedures',
      duration: '20 minutes',
      participants: 'Community',
      status: 'available'
    }
  ];

  const handleModuleStart = (moduleId) => {
    setSelectedModule(trainingModules.find(m => m.id === moduleId));
  };

  const handleModuleComplete = (moduleId) => {
    setCompletedModules([...completedModules, moduleId]);
    setUserProgress(prev => ({
      ...prev,
      completedModules: prev.completedModules + 1,
      completedHours: prev.completedHours + 2
    }));
  };

  const toggleKitItem = (index) => {
    // In a real app, this would persist to storage
    console.log(`Toggled kit item ${index}`);
  };

  const getDifficultyColor = (difficulty) => {
    switch(difficulty) {
      case 'Beginner': return 'text-green-600 bg-green-100';
      case 'Intermediate': return 'text-yellow-600 bg-yellow-100';
      case 'Advanced': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'Critical': return 'text-red-600';
      case 'High': return 'text-orange-600';
      case 'Medium': return 'text-yellow-600';
      default: return 'text-gray-600';
    }
  };

  return (
    <div className="space-y-6">
      {/* Progress Overview */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <BookOpen className="w-5 h-5 mr-2 text-primary-500" />
          Training Progress Overview
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="text-center p-4 bg-primary-50 rounded-lg">
            <div className="text-2xl font-bold text-primary-600">{userProgress.completedModules}/{userProgress.totalModules}</div>
            <div className="text-sm text-gray-600">Modules Completed</div>
          </div>
          <div className="text-center p-4 bg-green-50 rounded-lg">
            <div className="text-2xl font-bold text-green-600">{userProgress.completedHours}h</div>
            <div className="text-sm text-gray-600">Training Hours</div>
          </div>
          <div className="text-center p-4 bg-yellow-50 rounded-lg">
            <div className="text-2xl font-bold text-yellow-600">{userProgress.certificates}</div>
            <div className="text-sm text-gray-600">Certificates</div>
          </div>
          <div className="text-center p-4 bg-purple-50 rounded-lg">
            <div className="text-2xl font-bold text-purple-600">
              {Math.round((userProgress.completedModules / userProgress.totalModules) * 100)}%
            </div>
            <div className="text-sm text-gray-600">Overall Progress</div>
          </div>
        </div>

        <div className="w-full bg-gray-200 rounded-full h-3">
          <div 
            className="bg-primary-500 h-3 rounded-full transition-all duration-500" 
            style={{ width: `${(userProgress.completedModules / userProgress.totalModules) * 100}%` }}
          />
        </div>
      </div>

      {/* Training Modules */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4">Training Modules</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {trainingModules.map((module) => (
            <div key={module.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center">
                  <module.icon className="w-6 h-6 mr-2 text-primary-500" />
                  <div>
                    <h4 className="font-medium text-sm">{module.title}</h4>
                    <span className={`text-xs px-2 py-1 rounded-full ${getDifficultyColor(module.difficulty)}`}>
                      {module.difficulty}
                    </span>
                  </div>
                </div>
                {module.completed && <CheckCircle className="w-5 h-5 text-green-500" />}
              </div>
              
              <p className="text-sm text-gray-600 mb-3">{module.description}</p>
              
              <div className="flex items-center text-xs text-gray-500 mb-3">
                <Clock className="w-4 h-4 mr-1" />
                <span>{module.duration}</span>
              </div>
              
              <div className="mb-3">
                <div className="flex justify-between items-center mb-1">
                  <span className="text-xs font-medium">Progress</span>
                  <span className="text-xs text-gray-600">{module.progress}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-1.5">
                  <div 
                    className={`h-1.5 rounded-full ${module.completed ? 'bg-green-500' : 'bg-primary-500'}`}
                    style={{ width: `${module.progress}%` }}
                  />
                </div>
              </div>
              
              <div className="flex gap-2">
                {module.completed ? (
                  <button className="flex-1 px-3 py-1 bg-green-100 text-green-600 text-sm rounded hover:bg-green-200 transition-colors">
                    <CheckCircle className="w-4 h-4 inline mr-1" />
                    Completed
                  </button>
                ) : module.progress > 0 ? (
                  <button 
                    onClick={() => handleModuleStart(module.id)}
                    className="flex-1 px-3 py-1 bg-yellow-500 text-white text-sm rounded hover:bg-yellow-600 transition-colors"
                  >
                    Continue
                  </button>
                ) : (
                  <button 
                    onClick={() => handleModuleStart(module.id)}
                    className="flex-1 px-3 py-1 bg-primary-500 text-white text-sm rounded hover:bg-primary-600 transition-colors"
                  >
                    <Play className="w-4 h-4 inline mr-1" />
                    Start
                  </button>
                )}
                <button 
                  onClick={() => setSelectedModule(module)}
                  className="px-3 py-1 border border-gray-300 text-gray-600 text-sm rounded hover:bg-gray-50 transition-colors"
                >
                  Details
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Emergency Kit Checklist */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Shield className="w-5 h-5 mr-2 text-green-500" />
          Emergency Kit Checklist
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium mb-3">Essential Items</h4>
            <div className="space-y-3">
              {emergencyKit.map((item, index) => (
                <label key={index} className="flex items-start space-x-3">
                  <input 
                    type="checkbox" 
                    checked={item.checked}
                    onChange={() => toggleKitItem(index)}
                    className="mt-1 rounded border-gray-300 text-primary-600 focus:ring-primary-500" 
                  />
                  <div className="flex-1">
                    <span className={`text-sm ${item.checked ? 'line-through text-gray-500' : ''}`}>
                      {item.item}
                    </span>
                    <div className="flex items-center gap-2 mt-1">
                      <span className="text-xs text-gray-500">{item.category}</span>
                      <span className={`text-xs font-medium ${getPriorityColor(item.priority)}`}>
                        {item.priority}
                      </span>
                    </div>
                  </div>
                </label>
              ))}
            </div>
          </div>
          
          <div>
            <h4 className="font-medium mb-3">Kit Categories</h4>
            <div className="space-y-2">
              {['Water & Food', 'Medical', 'Communication', 'Tools', 'Protection', 'Sanitation'].map((category) => {
                const categoryItems = emergencyKit.filter(item => item.category === category);
                const checkedItems = categoryItems.filter(item => item.checked).length;
                const progress = (checkedItems / categoryItems.length) * 100;
                
                return (
                  <div key={category} className="p-3 border rounded">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-sm font-medium">{category}</span>
                      <span className="text-xs text-gray-600">{checkedItems}/{categoryItems.length}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-green-500 h-2 rounded-full transition-all duration-300" 
                        style={{ width: `${progress}%` }}
                      />
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>

      {/* Practice Drills */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Users className="w-5 h-5 mr-2 text-blue-500" />
          Practice Drills
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {drillScenarios.map((drill) => (
            <div key={drill.id} className="border rounded-lg p-4">
              <h4 className="font-medium mb-2">{drill.title}</h4>
              <p className="text-sm text-gray-600 mb-3">{drill.description}</p>
              
              <div className="text-xs text-gray-500 mb-3">
                <div className="flex items-center mb-1">
                  <Clock className="w-3 h-3 mr-1" />
                  <span>{drill.duration}</span>
                </div>
                <div className="flex items-center">
                  <Users className="w-3 h-3 mr-1" />
                  <span>{drill.participants}</span>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <span className={`text-xs px-2 py-1 rounded-full ${
                  drill.status === 'completed' ? 'bg-green-100 text-green-600' :
                  drill.status === 'scheduled' ? 'bg-yellow-100 text-yellow-600' :
                  'bg-gray-100 text-gray-600'
                }`}>
                  {drill.status}
                </span>
                
                <button className={`px-3 py-1 text-xs rounded ${
                  drill.status === 'completed' ? 'bg-gray-100 text-gray-600' :
                  'bg-primary-500 text-white hover:bg-primary-600'
                }`}>
                  {drill.status === 'completed' ? 'Review' : 
                   drill.status === 'scheduled' ? 'Join' : 'Schedule'}
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Module Detail Modal */}
      {selectedModule && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex justify-between items-start mb-4">
              <h3 className="text-lg font-semibold">{selectedModule.title}</h3>
              <button 
                onClick={() => setSelectedModule(null)}
                className="text-gray-400 hover:text-gray-600"
              >
                ×
              </button>
            </div>
            
            <p className="text-gray-600 mb-4">{selectedModule.description}</p>
            
            <div className="mb-4">
              <h4 className="font-medium mb-2">Topics Covered:</h4>
              <ul className="text-sm text-gray-600 space-y-1">
                {selectedModule.topics.map((topic, index) => (
                  <li key={index} className="flex items-center">
                    <CheckCircle className="w-4 h-4 mr-2 text-green-500" />
                    {topic}
                  </li>
                ))}
              </ul>
            </div>
            
            <div className="flex gap-2">
              <button 
                onClick={() => {
                  handleModuleStart(selectedModule.id);
                  setSelectedModule(null);
                }}
                className="flex-1 bg-primary-500 text-white px-4 py-2 rounded hover:bg-primary-600"
              >
                Start Module
              </button>
              <button 
                onClick={() => setSelectedModule(null)}
                className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-50"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Training;