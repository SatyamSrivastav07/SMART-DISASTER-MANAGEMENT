import React, { useState } from 'react';
import { Phone, MapPin, Heart, Users, Clock, AlertTriangle, Shield, Navigation, CheckCircle } from 'lucide-react';
import { useAlerts } from '../context/AlertContext';

const EmergencyResponse = () => {
  const { alerts, acknowledgeAlert, resolveAlert, assignResponseTeam } = useAlerts();
  const [selectedAlert, setSelectedAlert] = useState(null);
  const [emergencyType, setEmergencyType] = useState('');
  const [responseTeams] = useState([
    { id: 'fire-1', name: 'Fire Department Alpha', type: 'fire', status: 'available', members: 8, location: 'Station 1' },
    { id: 'medical-1', name: 'Medical Emergency Team', type: 'medical', status: 'available', members: 6, location: 'Hospital' },
    { id: 'rescue-1', name: 'Search & Rescue', type: 'rescue', status: 'deployed', members: 12, location: 'En Route' },
    { id: 'police-1', name: 'Police Response Unit', type: 'police', status: 'available', members: 10, location: 'Headquarters' },
    { id: 'hazmat-1', name: 'Hazmat Team', type: 'hazmat', status: 'available', members: 5, location: 'Special Unit' },
  ]);

  const emergencyContacts = [
    { name: 'Police', number: '100', type: 'police', color: 'blue' },
    { name: 'Fire Brigade', number: '101', type: 'fire', color: 'red' },
    { name: 'Ambulance', number: '102', type: 'medical', color: 'green' },
    { name: 'Disaster Management', number: '108', type: 'disaster', color: 'purple' },
    { name: 'Women Helpline', number: '181', type: 'support', color: 'pink' },
    { name: 'Child Helpline', number: '1098', type: 'support', color: 'orange' },
  ];

  const handleEmergencyCall = (contact) => {
    // In a real app, this would initiate a call
    alert(`Calling ${contact.name} (${contact.number})`);
  };

  const handleAcknowledgeAlert = (alertId) => {
    acknowledgeAlert(alertId);
  };

  const handleResolveAlert = (alertId) => {
    const resolution = prompt('Enter resolution details:');
    if (resolution) {
      resolveAlert(alertId, resolution);
    }
  };

  const handleAssignTeam = (alertId, teamId) => {
    assignResponseTeam(alertId, teamId);
    alert('Response team assigned successfully!');
  };

  const getTeamStatusColor = (status) => {
    switch(status) {
      case 'available': return 'text-success-600 bg-success-100';
      case 'deployed': return 'text-warning-600 bg-warning-100';
      case 'busy': return 'text-danger-600 bg-danger-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getSeverityColor = (severity) => {
    switch(severity) {
      case 'critical': return 'border-l-danger-500 bg-danger-50';
      case 'warning': return 'border-l-warning-500 bg-warning-50';
      case 'moderate': return 'border-l-warning-500 bg-warning-50';
      default: return 'border-l-primary-500 bg-primary-50';
    }
  };

  return (
    <div className="space-y-6">
      {/* Emergency Action Panel */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Phone className="w-5 h-5 mr-2 text-danger-500" />
          Emergency Response Center
        </h3>
        
        {/* Quick Emergency Buttons */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6">
          {emergencyContacts.map((contact) => (
            <button
              key={contact.number}
              onClick={() => handleEmergencyCall(contact)}
              className={`p-4 rounded-lg text-white font-medium hover:opacity-90 transition-opacity ${
                contact.color === 'blue' ? 'bg-blue-500' :
                contact.color === 'red' ? 'bg-red-500' :
                contact.color === 'green' ? 'bg-green-500' :
                contact.color === 'purple' ? 'bg-purple-500' :
                contact.color === 'pink' ? 'bg-pink-500' :
                'bg-orange-500'
              }`}
            >
              <Phone className="w-6 h-6 mx-auto mb-2" />
              <div className="text-sm">{contact.name}</div>
              <div className="font-bold">{contact.number}</div>
            </button>
          ))}
        </div>

        {/* Emergency Report Form */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h4 className="font-medium mb-3">Report Emergency</h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <select
              value={emergencyType}
              onChange={(e) => setEmergencyType(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
            >
              <option value="">Select Emergency Type</option>
              <option value="fire">Fire</option>
              <option value="medical">Medical Emergency</option>
              <option value="accident">Traffic Accident</option>
              <option value="flood">Flood</option>
              <option value="earthquake">Earthquake</option>
              <option value="other">Other</option>
            </select>
            
            <button className="bg-danger-500 hover:bg-danger-600 text-white px-4 py-2 rounded-md flex items-center justify-center">
              <MapPin className="w-4 h-4 mr-2" />
              Share Location
            </button>
            
            <button className="bg-primary-500 hover:bg-primary-600 text-white px-4 py-2 rounded-md">
              Submit Report
            </button>
          </div>
        </div>
      </div>

      {/* Active Alerts Management */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <AlertTriangle className="w-5 h-5 mr-2 text-warning-500" />
          Active Alert Management
        </h3>
        
        <div className="space-y-4">
          {alerts.length === 0 ? (
            <div className="text-center py-8">
              <Shield className="w-12 h-12 text-success-500 mx-auto mb-2" />
              <p className="text-gray-500">No active alerts</p>
              <p className="text-sm text-gray-400">All systems operating normally</p>
            </div>
          ) : (
            alerts.map((alert) => (
              <div key={alert.id} className={`border-l-4 rounded-lg p-4 ${getSeverityColor(alert.severity)}`}>
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center mb-2">
                      <AlertTriangle className="w-4 h-4 mr-2" />
                      <h4 className="font-medium">{alert.message}</h4>
                      <span className={`ml-2 px-2 py-1 text-xs rounded-full font-medium ${
                        alert.severity === 'critical' ? 'bg-danger-500 text-white' :
                        alert.severity === 'warning' ? 'bg-warning-500 text-white' :
                        'bg-warning-400 text-white'
                      }`}>
                        {alert.severity}
                      </span>
                    </div>
                    
                    <div className="flex items-center text-sm text-gray-600 mb-2">
                      <MapPin className="w-4 h-4 mr-1" />
                      <span>{alert.location}</span>
                      <Clock className="w-4 h-4 ml-4 mr-1" />
                      <span>{new Date(alert.timestamp).toLocaleString()}</span>
                    </div>
                    
                    <div className="text-sm text-gray-600">
                      Estimated Impact: {alert.estimatedImpact.toLocaleString()} people
                    </div>
                    
                    {alert.responseTeams.length > 0 && (
                      <div className="mt-2">
                        <span className="text-sm font-medium">Assigned Teams:</span>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {alert.responseTeams.map((team) => (
                            <span key={team.id} className="px-2 py-1 bg-primary-100 text-primary-800 text-xs rounded">
                              Team {team.id}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <div className="flex flex-col gap-2 ml-4">
                    {!alert.acknowledged && (
                      <button
                        onClick={() => handleAcknowledgeAlert(alert.id)}
                        className="px-3 py-1 bg-primary-500 text-white text-sm rounded hover:bg-primary-600"
                      >
                        Acknowledge
                      </button>
                    )}
                    
                    <button
                      onClick={() => setSelectedAlert(alert)}
                      className="px-3 py-1 bg-warning-500 text-white text-sm rounded hover:bg-warning-600"
                    >
                      Assign Team
                    </button>
                    
                    <button
                      onClick={() => handleResolveAlert(alert.id)}
                      className="px-3 py-1 bg-success-500 text-white text-sm rounded hover:bg-success-600"
                    >
                      Resolve
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Response Teams Status */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Users className="w-5 h-5 mr-2 text-primary-500" />
          Response Team Status
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {responseTeams.map((team) => (
            <div key={team.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
              <div className="flex justify-between items-start mb-2">
                <h4 className="font-medium">{team.name}</h4>
                <span className={`px-2 py-1 text-xs rounded-full ${getTeamStatusColor(team.status)}`}>
                  {team.status}
                </span>
              </div>
              
              <div className="text-sm text-gray-600 mb-2">
                <div className="flex items-center">
                  <Users className="w-4 h-4 mr-1" />
                  <span>{team.members} members</span>
                </div>
                <div className="flex items-center mt-1">
                  <MapPin className="w-4 h-4 mr-1" />
                  <span>{team.location}</span>
                </div>
              </div>
              
              {team.status === 'available' && selectedAlert && (
                <button
                  onClick={() => {
                    handleAssignTeam(selectedAlert.id, team.id);
                    setSelectedAlert(null);
                  }}
                  className="w-full mt-2 px-3 py-1 bg-primary-500 text-white text-sm rounded hover:bg-primary-600"
                >
                  Assign to Alert
                </button>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Emergency Resources */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4">Emergency Resources</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <h4 className="font-medium mb-3 flex items-center">
              <Heart className="w-4 h-4 mr-2 text-red-500" />
              Medical Facilities
            </h4>
            <ul className="space-y-2 text-sm">
              <li className="flex justify-between">
                <span>Max Super Speciality Hospital</span>
                <span className="text-green-600">Available</span>
              </li>
              <li className="flex justify-between">
                <span>Columbia Asia Hospital</span>
                <span className="text-green-600">Available</span>
              </li>
              <li className="flex justify-between">
                <span>Yashoda Hospital</span>
                <span className="text-yellow-600">Limited</span>
              </li>
            </ul>
          </div>
          
          <div>
            <h4 className="font-medium mb-3 flex items-center">
              <Shield className="w-4 h-4 mr-2 text-blue-500" />
              Emergency Shelters
            </h4>
            <ul className="space-y-2 text-sm">
              <li className="flex justify-between">
                <span>Community Center A</span>
                <span className="text-green-600">Open</span>
              </li>
              <li className="flex justify-between">
                <span>School Shelter B</span>
                <span className="text-green-600">Open</span>
              </li>
              <li className="flex justify-between">
                <span>Sports Complex C</span>
                <span className="text-green-600">Open</span>
              </li>
            </ul>
          </div>
          
          <div>
            <h4 className="font-medium mb-3 flex items-center">
              <Navigation className="w-4 h-4 mr-2 text-purple-500" />
              Evacuation Routes
            </h4>
            <ul className="space-y-2 text-sm">
              <li className="flex justify-between">
                <span>Route NH-9 North</span>
                <span className="text-green-600">Clear</span>
              </li>
              <li className="flex justify-between">
                <span>Route GT Road East</span>
                <span className="text-yellow-600">Congested</span>
              </li>
              <li className="flex justify-between">
                <span>Route Link Road South</span>
                <span className="text-red-600">Blocked</span>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EmergencyResponse;