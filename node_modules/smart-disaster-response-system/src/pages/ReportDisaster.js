import React, { useState } from 'react';
import { Camera, MapPin, AlertTriangle, Upload, X, CheckCircle } from 'lucide-react';

const ReportDisaster = () => {
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(null);
  const [locationLoading, setLocationLoading] = useState(false);

  // Mock user data - replace with actual auth context
  const user = { phone: '+91-9876543210' };

  const [formData, setFormData] = useState({
    type: '',
    title: '',
    description: '',
    severity: 'medium',
    location: {
      address: '',
      coordinates: {
        lat: '',
        lng: ''
      },
      landmark: '',
      city: '',
      state: 'Uttar Pradesh'
    },
    contactInfo: {
      phone: user?.phone || '',
      alternatePhone: '',
      isContactPublic: false
    },
    affectedPeople: {
      estimated: ''
    },
    isPublic: true,
    tags: []
  });

  const [images, setImages] = useState([]);
  const [imagePreviews, setImagePreviews] = useState([]);

  const disasterTypes = [
    { value: 'fire', label: 'Fire', icon: '🔥' },
    { value: 'flood', label: 'Flood', icon: '🌊' },
    { value: 'earthquake', label: 'Earthquake', icon: '🌍' },
    { value: 'storm', label: 'Storm/Cyclone', icon: '🌪️' },
    { value: 'landslide', label: 'Landslide', icon: '⛰️' },
    { value: 'accident', label: 'Accident', icon: '🚗' },
    { value: 'building_collapse', label: 'Building Collapse', icon: '🏢' },
    { value: 'gas_leak', label: 'Gas Leak', icon: '⚠️' },
    { value: 'water_logging', label: 'Water Logging', icon: '💧' },
    { value: 'tree_fall', label: 'Tree Fall', icon: '🌳' },
    { value: 'power_outage', label: 'Power Outage', icon: '⚡' },
    { value: 'road_block', label: 'Road Block', icon: '🚧' },
    { value: 'other', label: 'Other', icon: '❓' }
  ];

  const severityLevels = [
    { value: 'low', label: 'Low', color: 'text-yellow-600' },
    { value: 'medium', label: 'Medium', color: 'text-orange-600' },
    { value: 'high', label: 'High', color: 'text-red-600' },
    { value: 'critical', label: 'Critical', color: 'text-red-800' }
  ];

  // Mock location API - replace with actual implementation
  const getCurrentLocation = async () => {
    setLocationLoading(true);
    setError(null);
    
    try {
      if (!navigator.geolocation) {
        throw new Error('Geolocation is not supported by this browser.');
      }

      const position = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject, {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 60000
        });
      });

      const { latitude, longitude } = position.coords;
      
      setFormData(prev => ({
        ...prev,
        location: {
          ...prev.location,
          coordinates: {
            lat: latitude.toString(),
            lng: longitude.toString()
          }
        }
      }));

      // Mock reverse geocoding - replace with actual API call
      setFormData(prev => ({
        ...prev,
        location: {
          ...prev.location,
          address: `Lat: ${latitude.toFixed(4)}, Lng: ${longitude.toFixed(4)}`,
          city: 'Auto-detected'
        }
      }));

    } catch (error) {
      console.error('Geolocation error:', error);
      setError('Could not get your location. Please enter manually.');
    } finally {
      setLocationLoading(false);
    }
  };

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    if (name.includes('.')) {
      const parts = name.split('.');
      if (parts.length === 2) {
        const [parent, child] = parts;
        setFormData(prev => ({
          ...prev,
          [parent]: {
            ...prev[parent],
            [child]: type === 'checkbox' ? checked : value
          }
        }));
      } else if (parts.length === 3) {
        const [parent, subParent, child] = parts;
        setFormData(prev => ({
          ...prev,
          [parent]: {
            ...prev[parent],
            [subParent]: {
              ...prev[parent][subParent],
              [child]: type === 'checkbox' ? checked : value
            }
          }
        }));
      }
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: type === 'checkbox' ? checked : value
      }));
    }
  };

  // Handle image upload
  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    
    if (files.length + images.length > 5) {
      setError('You can upload maximum 5 images');
      return;
    }

    // Validate file types and sizes
    const validFiles = [];
    let hasError = false;

    files.forEach(file => {
      if (!file.type.startsWith('image/')) {
        setError('Only image files are allowed');
        hasError = true;
        return;
      }
      if (file.size > 10 * 1024 * 1024) { // 10MB limit
        setError('Each image must be less than 10MB');
        hasError = true;
        return;
      }
      validFiles.push(file);
    });

    if (hasError) return;

    setImages(prev => [...prev, ...validFiles]);

    // Create previews
    validFiles.forEach(file => {
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreviews(prev => [...prev, {
          file: file.name,
          url: e.target.result
        }]);
      };
      reader.readAsDataURL(file);
    });

    // Clear the error if upload is successful
    setError(null);
  };

  // Remove image
  const removeImage = (index) => {
    setImages(prev => prev.filter((_, i) => i !== index));
    setImagePreviews(prev => prev.filter((_, i) => i !== index));
  };

  // Mock API call - replace with actual implementation
  const submitReport = async (reportData) => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Mock success response
    console.log('Report submitted:', reportData);
    return { success: true, id: Date.now() };
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // Validate required fields
      if (!formData.type || !formData.title || !formData.description || !formData.location.address) {
        throw new Error('Please fill in all required fields');
      }

      if (!formData.location.coordinates.lat || !formData.location.coordinates.lng) {
        throw new Error('Please provide location coordinates');
      }

      // Prepare form data for submission
      const reportData = {
        ...formData,
        images: images,
        location: {
          ...formData.location,
          coordinates: {
            lat: parseFloat(formData.location.coordinates.lat),
            lng: parseFloat(formData.location.coordinates.lng)
          }
        }
      };

      if (formData.affectedPeople.estimated) {
        reportData.affectedPeople.estimated = parseInt(formData.affectedPeople.estimated);
      }

      const response = await submitReport(reportData);
      
      if (response.success) {
        setSuccess(true);
        setTimeout(() => {
          // Mock navigation - replace with actual router navigation
          console.log('Navigating to my-reports...');
        }, 2000);
      }

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return (
      <div className="max-w-2xl mx-auto py-12">
        <div className="text-center">
          <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Report Submitted Successfully!</h2>
          <p className="text-gray-600 mb-4">
            Your disaster report has been submitted and will be reviewed by our response team.
          </p>
          <p className="text-sm text-gray-500">Redirecting to your reports...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto py-6 px-4">
      <div className="bg-white shadow-md rounded-lg p-6">
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-gray-900 flex items-center">
            <AlertTriangle className="w-6 h-6 mr-2 text-red-500" />
            Report Disaster/Emergency
          </h1>
          <p className="text-gray-600 mt-1">
            Report an emergency or disaster situation to help authorities respond quickly.
          </p>
        </div>

        {error && (
          <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-md">
            <p className="text-red-800">{error}</p>
          </div>
        )}

        <div className="space-y-6">
          {/* Disaster Type */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Disaster Type *
            </label>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {disasterTypes.map((type) => (
                <label key={type.value} className="relative">
                  <input
                    type="radio"
                    name="type"
                    value={type.value}
                    checked={formData.type === type.value}
                    onChange={handleInputChange}
                    className="sr-only"
                    required
                  />
                  <div className={`border-2 rounded-lg p-3 cursor-pointer transition-colors ${
                    formData.type === type.value
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}>
                    <div className="text-center">
                      <span className="text-2xl block mb-1">{type.icon}</span>
                      <span className="text-sm font-medium">{type.label}</span>
                    </div>
                  </div>
                </label>
              ))}
            </div>
          </div>

          {/* Title */}
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700">
              Title *
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleInputChange}
              placeholder="Brief title describing the situation"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              required
              maxLength={100}
            />
          </div>

          {/* Description */}
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700">
              Description *
            </label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              placeholder="Detailed description of the situation, what happened, current status..."
              rows={4}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              required
              maxLength={1000}
            />
            <p className="text-sm text-gray-500 mt-1">
              {formData.description.length}/1000 characters
            </p>
          </div>

          {/* Severity */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Severity Level
            </label>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {severityLevels.map((level) => (
                <label key={level.value} className="relative">
                  <input
                    type="radio"
                    name="severity"
                    value={level.value}
                    checked={formData.severity === level.value}
                    onChange={handleInputChange}
                    className="sr-only"
                  />
                  <div className={`border-2 rounded-lg p-3 cursor-pointer transition-colors ${
                    formData.severity === level.value
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}>
                    <div className="text-center">
                      <span className={`font-medium ${level.color}`}>{level.label}</span>
                    </div>
                  </div>
                </label>
              ))}
            </div>
          </div>

          {/* Location */}
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <label className="block text-sm font-medium text-gray-700">
                Location *
              </label>
              <button
                type="button"
                onClick={getCurrentLocation}
                disabled={locationLoading}
                className="flex items-center text-sm text-blue-600 hover:text-blue-500 disabled:text-gray-400"
              >
                <MapPin className="w-4 h-4 mr-1" />
                {locationLoading ? 'Getting location...' : 'Use current location'}
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <input
                type="text"
                name="location.address"
                value={formData.location.address}
                onChange={handleInputChange}
                placeholder="Full address"
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                required
              />
              <input
                type="text"
                name="location.landmark"
                value={formData.location.landmark}
                onChange={handleInputChange}
                placeholder="Nearby landmark (optional)"
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <input
                type="number"
                step="any"
                name="location.coordinates.lat"
                value={formData.location.coordinates.lat}
                onChange={handleInputChange}
                placeholder="Latitude"
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                required
              />
              <input
                type="number"
                step="any"
                name="location.coordinates.lng"
                value={formData.location.coordinates.lng}
                onChange={handleInputChange}
                placeholder="Longitude"
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                required
              />
              <input
                type="text"
                name="location.city"
                value={formData.location.city}
                onChange={handleInputChange}
                placeholder="City"
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
              <select
                name="location.state"
                value={formData.location.state}
                onChange={handleInputChange}
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="Uttar Pradesh">Uttar Pradesh</option>
                <option value="Delhi">Delhi</option>
                <option value="Haryana">Haryana</option>
                <option value="Maharashtra">Maharashtra</option>
                <option value="Karnataka">Karnataka</option>
                <option value="Tamil Nadu">Tamil Nadu</option>
                <option value="West Bengal">West Bengal</option>
                <option value="Rajasthan">Rajasthan</option>
                <option value="Gujarat">Gujarat</option>
                <option value="Madhya Pradesh">Madhya Pradesh</option>
              </select>
            </div>
          </div>

          {/* Contact Info */}
          <div className="space-y-4">
            <label className="block text-sm font-medium text-gray-700">
              Contact Information
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <input
                type="tel"
                name="contactInfo.phone"
                value={formData.contactInfo.phone}
                onChange={handleInputChange}
                placeholder="Primary phone number"
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
              <input
                type="tel"
                name="contactInfo.alternatePhone"
                value={formData.contactInfo.alternatePhone}
                onChange={handleInputChange}
                placeholder="Alternate phone number (optional)"
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            <div className="flex items-center">
              <input
                type="checkbox"
                name="contactInfo.isContactPublic"
                checked={formData.contactInfo.isContactPublic}
                onChange={handleInputChange}
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label className="ml-2 block text-sm text-gray-700">
                Make contact information public for emergency responders
              </label>
            </div>
          </div>

          {/* Affected People */}
          <div>
            <label htmlFor="affectedPeople" className="block text-sm font-medium text-gray-700">
              Estimated Number of People Affected (Optional)
            </label>
            <input
              type="number"
              name="affectedPeople.estimated"
              value={formData.affectedPeople.estimated}
              onChange={handleInputChange}
              placeholder="Number of people affected"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              min="0"
            />
          </div>

          {/* Images */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Upload Images (Optional)
            </label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6">
              <div className="text-center">
                <Camera className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <div className="mb-4">
                  <label className="cursor-pointer">
                    <span className="mt-2 block text-sm font-medium text-gray-900">
                      Upload photos of the situation
                    </span>
                    <span className="mt-1 block text-sm text-gray-500">
                      PNG, JPG, GIF up to 10MB each (max 5 images)
                    </span>
                    <input
                      type="file"
                      multiple
                      accept="image/*"
                      onChange={handleImageUpload}
                      className="hidden"
                    />
                    <span className="mt-4 inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                      <Upload className="w-4 h-4 mr-2" />
                      Choose Images
                    </span>
                  </label>
                </div>
              </div>

              {/* Image Previews */}
              {imagePreviews.length > 0 && (
                <div className="mt-4 grid grid-cols-2 md:grid-cols-3 gap-4">
                  {imagePreviews.map((preview, index) => (
                    <div key={index} className="relative">
                      <img
                        src={preview.url}
                        alt={`Preview ${index + 1}`}
                        className="w-full h-24 object-cover rounded-lg"
                      />
                      <button
                        type="button"
                        onClick={() => removeImage(index)}
                        className="absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                      >
                        <X className="w-3 h-3" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Privacy Settings */}
          <div className="flex items-center">
            <input
              type="checkbox"
              name="isPublic"
              checked={formData.isPublic}
              onChange={handleInputChange}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label className="ml-2 block text-sm text-gray-700">
              Make this report publicly visible (helps with community awareness)
            </label>
          </div>

          {/* Submit Button */}
          <div className="pt-6">
            <button
              type="button"
              onClick={handleSubmit}
              disabled={loading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <div className="flex items-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Submitting Report...
                </div>
              ) : (
                'Submit Emergency Report'
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};
    
export default ReportDisaster;