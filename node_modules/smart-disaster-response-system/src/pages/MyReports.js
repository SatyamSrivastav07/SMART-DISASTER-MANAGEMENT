import React, { useState, useEffect } from 'react';
import { FileText, Eye, Clock, CheckCircle, AlertTriangle } from 'lucide-react';
import { reportsAPI } from '../services/api';
import { useAuth } from '../context/AuthContext';

const MyReports = () => {
  const { user } = useAuth();
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedStatus, setSelectedStatus] = useState('all');

  useEffect(() => {
    fetchMyReports();
  }, [selectedStatus]);

  const fetchMyReports = async () => {
    try {
      setLoading(true);
      const params = selectedStatus !== 'all' ? { status: selectedStatus } : {};
      const response = await reportsAPI.getUserReports(params);
      setReports(response.reports);
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status) => {
    const colors = {
      'reported': 'text-blue-600 bg-blue-100',
      'verified': 'text-green-600 bg-green-100',
      'in_progress': 'text-orange-600 bg-orange-100',
      'resolved': 'text-gray-600 bg-gray-100',
      'false_alarm': 'text-red-600 bg-red-100'
    };
    return colors[status] || colors.reported;
  };

  const getSeverityColor = (severity) => {
    const colors = {
      'low': 'text-yellow-600',
      'medium': 'text-orange-600',
      'high': 'text-red-600',
      'critical': 'text-red-800'
    };
    return colors[severity] || colors.medium;
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h1 className="text-2xl font-bold text-gray-900 flex items-center">
          <FileText className="w-6 h-6 mr-2 text-primary-500" />
          My Reports
        </h1>
        <p className="text-gray-600 mt-1">
          View and track your submitted disaster reports
        </p>
      </div>

      {/* Status Filter */}
      <div className="bg-white rounded-lg shadow-md p-4">
        <div className="flex flex-wrap gap-2">
          {[
            { value: 'all', label: 'All Reports' },
            { value: 'reported', label: 'Reported' },
            { value: 'verified', label: 'Verified' },
            { value: 'in_progress', label: 'In Progress' },
            { value: 'resolved', label: 'Resolved' }
          ].map((status) => (
            <button
              key={status.value}
              onClick={() => setSelectedStatus(status.value)}
              className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                selectedStatus === status.value
                  ? 'bg-primary-500 text-white'
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              {status.label}
            </button>
          ))}
        </div>
      </div>

      {/* Reports List */}
      <div className="space-y-4">
        {reports.length === 0 ? (
          <div className="bg-white rounded-lg shadow-md p-8 text-center">
            <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No Reports Found</h3>
            <p className="text-gray-600 mb-4">
              {selectedStatus === 'all' 
                ? "You haven't submitted any reports yet."
                : `No reports found with status: ${selectedStatus}`
              }
            </p>
            <button
              onClick={() => window.location.href = '/report-disaster'}
              className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
            >
              Submit Your First Report
            </button>
          </div>
        ) : (
          reports.map((report) => (
            <div key={report._id} className="bg-white rounded-lg shadow-md p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex-1">
                  <div className="flex items-center mb-2">
                    <h3 className="text-lg font-semibold text-gray-900">{report.title}</h3>
                    <span className={`ml-3 px-2 py-1 text-xs rounded-full font-medium ${getStatusColor(report.status)}`}>
                      {report.status.replace('_', ' ').toUpperCase()}
                    </span>
                  </div>
                  
                  <div className="flex items-center text-sm text-gray-600 mb-2">
                    <span className="capitalize font-medium mr-4">{report.type.replace('_', ' ')}</span>
                    <span className={`font-medium ${getSeverityColor(report.severity)}`}>
                      {report.severity.toUpperCase()}
                    </span>
                  </div>
                  
                  <p className="text-gray-700 mb-3">{report.description}</p>
                  
                  <div className="flex items-center text-sm text-gray-500">
                    <Clock className="w-4 h-4 mr-1" />
                    <span>Reported: {new Date(report.createdAt).toLocaleString()}</span>
                    {report.verifiedAt && (
                      <>
                        <span className="mx-2">â€¢</span>
                        <CheckCircle className="w-4 h-4 mr-1 text-green-500" />
                        <span>Verified: {new Date(report.verifiedAt).toLocaleDateString()}</span>
                      </>
                    )}
                  </div>
                </div>
                
                <div className="flex flex-col items-end">
                  <span className={`text-sm font-medium mb-2 ${getSeverityColor(report.severity)}`}>
                    Priority: {report.priority}/10
                  </span>
                  <button className="text-primary-600 hover:text-primary-500 text-sm font-medium flex items-center">
                    <Eye className="w-4 h-4 mr-1" />
                    View Details
                  </button>
                </div>
              </div>

              {/* Location */}
              <div className="border-t border-gray-200 pt-3 mb-3">
                <p className="text-sm text-gray-600">
                  <span className="font-medium">Location:</span> {report.location.address}
                </p>
                {report.location.landmark && (
                  <p className="text-sm text-gray-600">
                    <span className="font-medium">Landmark:</span> {report.location.landmark}
                  </p>
                )}
              </div>

              {/* Images */}
              {report.images && report.images.length > 0 && (
                <div className="border-t border-gray-200 pt-3 mb-3">
                  <p className="text-sm font-medium text-gray-700 mb-2">Attached Images:</p>
                  <div className="flex space-x-2">
                    {report.images.slice(0, 3).map((image, index) => (
                      <img
                        key={index}
                        src={image.url}
                        alt={`Report image ${index + 1}`}
                        className="w-16 h-16 object-cover rounded-lg"
                      />
                    ))}
                    {report.images.length > 3 && (
                      <div className="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center">
                        <span className="text-sm text-gray-600">+{report.images.length - 3}</span>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Assigned Teams */}
              {report.assignedTeams && report.assignedTeams.length > 0 && (
                <div className="border-t border-gray-200 pt-3">
                  <p className="text-sm font-medium text-gray-700 mb-2">Response Teams:</p>
                  <div className="flex flex-wrap gap-2">
                    {report.assignedTeams.map((team, index) => (
                      <span
                        key={index}
                        className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full"
                      >
                        {team.teamId?.name || `Team ${team.teamId}`}
                      </span>
                    ))}
                  </div>
                </div>
              )}

              {/* Admin Notes */}
              {report.adminNotes && (
                <div className="border-t border-gray-200 pt-3 mt-3">
                  <p className="text-sm font-medium text-gray-700 mb-1">Admin Notes:</p>
                  <p className="text-sm text-gray-600 italic">{report.adminNotes}</p>
                </div>
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default MyReports;