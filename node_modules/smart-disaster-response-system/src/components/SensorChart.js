import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { useSensorData } from '../context/SensorDataContext';

const SensorChart = ({ sensorType, title, color = '#3b82f6', timeRange = '24h' }) => {
  const { getHistoricalData } = useSensorData();
  
  const data = getHistoricalData(sensorType, timeRange);
  
  const formatXAxis = (tickItem) => {
    const date = new Date(tickItem);
    return timeRange === '24h' 
      ? date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })
      : date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
  };
  
  const formatTooltip = (value, name, props) => {
    if (name === 'value') {
      const unit = getUnit(sensorType);
      return [`${value.toFixed(2)}${unit}`, title];
    }
    return [value, name];
  };
  
  const formatTooltipLabel = (label) => {
    return new Date(label).toLocaleString();
  };
  
  const getUnit = (type) => {
    switch(type) {
      case 'seismic': return ' magnitude';
      case 'temperature': return 'Â°C';
      case 'airQuality': return ' AQI';
      case 'waterLevel': return 'm';
      case 'windSpeed': return ' km/h';
      case 'humidity': return '%';
      case 'pressure': return ' hPa';
      default: return '';
    }
  };
  
  const getThresholdLines = (type) => {
    switch(type) {
      case 'seismic':
        return [
          { value: 3.0, color: '#f59e0b', label: 'Warning' },
          { value: 4.0, color: '#ef4444', label: 'Critical' }
        ];
      case 'airQuality':
        return [
          { value: 100, color: '#f59e0b', label: 'Moderate' },
          { value: 200, color: '#ef4444', label: 'Unhealthy' }
        ];
      case 'waterLevel':
        return [
          { value: 6.0, color: '#f59e0b', label: 'Watch' },
          { value: 8.0, color: '#ef4444', label: 'Warning' }
        ];
      default:
        return [];
    }
  };
  
  const thresholds = getThresholdLines(sensorType);
  const maxValue = Math.max(...data.map(d => d.value));
  const minValue = Math.min(...data.map(d => d.value));
  const padding = (maxValue - minValue) * 0.1;
  
  return (
    <div className="w-full h-64">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" stroke="#f3f4f6" />
          <XAxis 
            dataKey="timestamp" 
            tickFormatter={formatXAxis}
            stroke="#6b7280"
            fontSize={12}
          />
          <YAxis 
            domain={[minValue - padding, maxValue + padding]}
            stroke="#6b7280"
            fontSize={12}
          />
          <Tooltip 
            formatter={formatTooltip}
            labelFormatter={formatTooltipLabel}
            contentStyle={{
              backgroundColor: '#ffffff',
              border: '1px solid #e5e7eb',
              borderRadius: '0.5rem',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
            }}
          />
          <Line 
            type="monotone" 
            dataKey="value" 
            stroke={color} 
            strokeWidth={2}
            dot={false}
            activeDot={{ r: 4, stroke: color, strokeWidth: 2 }}
          />
          
          {/* Threshold lines */}
          {thresholds.map((threshold, index) => (
            <Line
              key={index}
              type="monotone"
              dataKey={() => threshold.value}
              stroke={threshold.color}
              strokeWidth={1}
              strokeDasharray="5 5"
              dot={false}
              activeDot={false}
            />
          ))}
        </LineChart>
      </ResponsiveContainer>
      
      {/* Threshold legend */}
      {thresholds.length > 0 && (
        <div className="mt-2 flex flex-wrap gap-4 text-xs">
          {thresholds.map((threshold, index) => (
            <div key={index} className="flex items-center">
              <div 
                className="w-3 h-0.5 mr-1" 
                style={{ 
                  backgroundColor: threshold.color,
                  borderStyle: 'dashed',
                  borderWidth: '1px 0'
                }}
              />
              <span className="text-gray-600">
                {threshold.label}: {threshold.value}{getUnit(sensorType)}
              </span>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default SensorChart;