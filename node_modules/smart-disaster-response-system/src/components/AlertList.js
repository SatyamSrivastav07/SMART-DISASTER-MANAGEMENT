import React from 'react';
import { AlertTriangle, MapPin, Clock, CheckCircle, Users } from 'lucide-react';

const AlertList = ({ alerts, showActions = true, onAcknowledge, onResolve, onAssignTeam }) => {
  const getSeverityColor = (severity) => {
    switch(severity) {
      case 'critical': return 'border-l-danger-500 bg-danger-50';
      case 'warning': return 'border-l-warning-500 bg-warning-50';
      case 'moderate': return 'border-l-warning-500 bg-warning-50';
      default: return 'border-l-primary-500 bg-primary-50';
    }
  };

  const getSeverityBadge = (severity) => {
    switch(severity) {
      case 'critical': return 'bg-danger-500 text-white';
      case 'warning': return 'bg-warning-500 text-white';
      case 'moderate': return 'bg-warning-400 text-white';
      default: return 'bg-primary-500 text-white';
    }
  };

  const getSeverityIcon = (type) => {
    return <AlertTriangle className="w-4 h-4" />;
  };

  const formatTimeAgo = (timestamp) => {
    const now = new Date();
    const alertTime = new Date(timestamp);
    const diffMs = now - alertTime;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);

    if (diffMins < 1) return 'Just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    if (diffHours < 24) return `${diffHours}h ago`;
    return `${diffDays}d ago`;
  };

  if (alerts.length === 0) {
    return (
      <div className="text-center py-8">
        <CheckCircle className="w-12 h-12 text-success-500 mx-auto mb-2" />
        <p className="text-gray-500">No alerts to display</p>
        <p className="text-sm text-gray-400">All systems operating normally</p>
      </div>
    );
  }

  return (
    <div className="space-y-3 max-h-96 overflow-y-auto">
      {alerts.map((alert) => (
        <div 
          key={alert.id} 
          className={`border-l-4 rounded-lg p-4 ${getSeverityColor(alert.severity)}`}
        >
          <div className="flex justify-between items-start">
            <div className="flex-1">
              <div className="flex items-center mb-2">
                {getSeverityIcon(alert.type)}
                <h4 className="font-medium ml-2 flex-1">{alert.message}</h4>
                <span className={`px-2 py-1 text-xs rounded-full font-medium ${getSeverityBadge(alert.severity)}`}>
                  {alert.severity}
                </span>
              </div>
              
              <div className="flex items-center text-sm text-gray-600 mb-2 flex-wrap gap-4">
                <div className="flex items-center">
                  <MapPin className="w-4 h-4 mr-1" />
                  <span>{alert.location}</span>
                </div>
                <div className="flex items-center">
                  <Clock className="w-4 h-4 mr-1" />
                  <span>{formatTimeAgo(alert.timestamp)}</span>
                </div>
                {alert.estimatedImpact && (
                  <div className="flex items-center">
                    <Users className="w-4 h-4 mr-1" />
                    <span>Impact: {alert.estimatedImpact.toLocaleString()}</span>
                  </div>
                )}
              </div>
              
              <div className="flex items-center gap-4 text-xs text-gray-500">
                {alert.acknowledged && (
                  <div className="flex items-center text-green-600">
                    <CheckCircle className="w-3 h-3 mr-1" />
                    <span>Acknowledged</span>
                  </div>
                )}
                
                {alert.responseTeams?.length > 0 && (
                  <div className="flex items-center">
                    <Users className="w-3 h-3 mr-1" />
                    <span>{alert.responseTeams.length} team(s) assigned</span>
                  </div>
                )}
              </div>
            </div>
            
            {showActions && (
              <div className="flex flex-col gap-2 ml-4">
                {!alert.acknowledged && onAcknowledge && (
                  <button
                    onClick={() => onAcknowledge(alert.id)}
                    className="px-3 py-1 bg-primary-500 text-white text-xs rounded hover:bg-primary-600 whitespace-nowrap"
                  >
                    Acknowledge
                  </button>
                )}
                
                {onAssignTeam && (
                  <button
                    onClick={() => onAssignTeam(alert.id)}
                    className="px-3 py-1 bg-warning-500 text-white text-xs rounded hover:bg-warning-600 whitespace-nowrap"
                  >
                    Assign Team
                  </button>
                )}
                
                {onResolve && (
                  <button
                    onClick={() => onResolve(alert.id)}
                    className="px-3 py-1 bg-success-500 text-white text-xs rounded hover:bg-success-600 whitespace-nowrap"
                  >
                    Resolve
                  </button>
                )}
              </div>
            )}
          </div>
          
          {alert.responseTeams?.length > 0 && (
            <div className="mt-3 pt-3 border-t border-gray-200">
              <div className="text-xs text-gray-600">
                <span className="font-medium">Response Teams:</span>
                <div className="flex flex-wrap gap-1 mt-1">
                  {alert.responseTeams.map((team, index) => (
                    <span 
                      key={index}
                      className="px-2 py-1 bg-primary-100 text-primary-800 rounded"
                    >
                      {team.id}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

export default AlertList;