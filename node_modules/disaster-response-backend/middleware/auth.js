const jwt = require('jsonwebtoken');

// -------------------- Dummy User --------------------
const DUMMY_USER = {
  _id: '64f000000000000000000001', // any fixed id
  name: 'John Doe',
  email: 'dummy@example.com',
  role: 'admin', // change to 'citizen' or 'responder' as needed
  phone: '+911234567890',
  location: {
    address: '123 Dummy Street',
    city: 'Ghaziabad',
    state: 'UP',
    country: 'India',
    coordinates: { lat: 28.6692, lng: 77.4538 }
  },
  isVerified: true,
  lastLogin: new Date()
};

// -------------------- Authentication Middleware --------------------
const auth = async (req, res, next) => {
  try {
    // If dummy mode enabled, attach dummy user and skip token check
    if (process.env.USE_DUMMY_USER === 'true') {
      req.user = DUMMY_USER;
      return next();
    }

    const token = req.header('Authorization')?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ message: 'No token provided, authorization denied' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // contains userId, email, role, name
    next();
  } catch (error) {
    console.error('Auth middleware error:', error.message);
    res.status(401).json({ message: 'Token is not valid or expired' });
  }
};

// -------------------- Role-based Authorization Middleware --------------------
const authorize = (...roles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ message: 'Authentication required' });
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ 
        message: `Access denied. Required roles: ${roles.join(', ')}` 
      });
    }

    next();
  };
};

// -------------------- Predefined Role Middlewares --------------------
const adminOnly = authorize('admin');
const adminOrResponder = authorize('admin', 'responder');

// -------------------- Optional Authentication Middleware --------------------
const optionalAuth = async (req, res, next) => {
  try {
    if (process.env.USE_DUMMY_USER === 'true') {
      req.user = DUMMY_USER;
      return next();
    }

    const token = req.header('Authorization')?.replace('Bearer ', '');
    if (token) {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      req.user = decoded;
    }

    next();
  } catch (error) {
    console.warn('Optional auth failed:', error.message);
    next();
  }
};

module.exports = {
  auth,
  authorize,
  adminOnly,
  adminOrResponder,
  optionalAuth
};
